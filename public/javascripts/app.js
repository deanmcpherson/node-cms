// Generated by CoffeeScript 1.6.2
(function() {
  var $, Prism, Showdown, deanApp;

  window.E = {
    first: true
  };

  $ = jQuery;

  Showdown = window.Showdown;

  Prism = window.Prism;

  window.deanApp = deanApp = angular.module('deanApp', ['ui']).config(function($routeProvider, $locationProvider) {
    $locationProvider.html5Mode(true);
    return $routeProvider.when('/', {
      controller: 'FeedCtrl',
      templateUrl: '/partials/articles.html'
    }).when('/preview', {
      controller: 'FeedCtrl',
      templateUrl: '/partials/articles.html'
    }).when('/:slug', {
      controller: 'SingleCtrl',
      templateUrl: '/partials/article.html'
    });
  }).directive('markdown', function() {
    return {
      restrict: 'E',
      replace: true,
      scope: {
        cont: '='
      },
      link: function(scope, element, attrs) {
        return scope.$watch('cont', function(n, p) {
          var converter, htmlText;

          if (typeof n === 'string') {
            converter = new Showdown.converter();
            htmlText = converter.makeHtml(n);
            element.html(htmlText);
            if (typeof Prism === 'object') {
              return Prism.highlightAll();
            }
          } else {
            return element.html(n);
          }
        });
      }
    };
  }).directive('editor', function() {
    return function(scope, element, attrs) {
      return $(element).keydown(function(e) {
        var $this, end, start, value;

        if (e.keyCode === 9) {
          start = this.selectionStart;
          end = this.selectionEnd;
          $this = $(this);
          value = $this.val();
          $this.val(value.substring(0, start) + "\t" + value.substring(end));
          this.selectionStart = this.selectionEnd = start + 1;
          return e.preventDefault();
        }
      });
    };
  }).directive('uploadFile', function() {
    return function(scope, element, attrs) {
      var formdata, input;

      formdata = false;
      input = element[0];
      return input.addEventListener("change", function(evt) {
        var file, reader, _i, _len, _ref;

        console.log('uploading');
        formdata = new FormData();
        if (window.FileReader) {
          _ref = this.files;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            file = _ref[_i];
            reader = new FileReader();
            reader.onloadend = function(e) {};
            reader.readAsDataURL(file);
            if (formdata) {
              formdata.append("file", file);
            }
          }
          if (FormData) {
            return $.ajax({
              url: "/upload",
              type: "POST",
              data: formdata,
              processData: false,
              contentType: false,
              success: function(res) {
                return scope.addImage(res);
              }
            });
          }
        }
      }, false);
    };
  });

  window.FeedCtrl = function($scope, $http, $rootScope) {
    $scope.items = [];
    $scope.newImages = [];
    $scope.newItem = {};
    $scope.adding = false;
    $scope.isAdmin = false;
    $scope.addImage = function(res) {
      $scope.newImages.unshift(res.data);
      $scope.images.push(res.data);
      return $scope.$apply();
    };
    $scope.addImageToContent = function(item) {
      var content, imageString;

      content = item.contentTmp;
      if (this.image.isImage) {
        imageString = "<img src='" + this.image.path + "' />";
      } else {
        imageString = "<a href='" + this.image.path + "'>" + this.image.name + "</a>";
      }
      if (content === !void 0) {
        return item.contentTmp += imagesString;
      } else {
        return item.contentTmp = imageString;
      }
    };
    $scope.isImage = function(item) {
      return item.isImage;
    };
    $scope.isFeatureImage = function(item) {
      if (item.featureImage === this.image.path) {
        return true;
      } else {
        return false;
      }
    };
    $scope.featureImageToggle = function(item, flag) {
      if (flag) {
        return item.featureIMage = thisimage.path;
      } else {
        return delete item.featureImage;
      }
    };
    $scope.refreshImages = function() {
      $('#SpinnerWrap').addClass('act');
      return $http.get('/_api/images').then(function(result) {
        $('#SpinnerWrap').removeClass('act');
        return $scope.images = result.data.data;
      });
    };
    $scope.finalize = function() {
      if (E.first) {
        $('#SpinnerWrap').removeClass('act');
        return E.first = false;
      }
    };
    $scope.refresh = function() {
      return $http.get('/_api/list').then(function(result) {
        var x, _i, _len, _ref;

        $scope.isAdmin = result.data.isAdmin;
        $scope.items = result.data.data;
        _ref = $scope.items;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          x = _ref[_i];
          x['contentTmp'] = x['content'];
        }
        E.e = $scope;
        $scope.finalize();
        if ($scope.isAdmin) {
          return $scope.refreshImages();
        }
      });
    };
    $scope.imageFlag = function(flag, item) {
      if (item === void 0) {
        return this.item.imageFlag = flag;
      } else {
        return item.imageFlag = flag;
      }
    };
    $scope.save = function() {
      var data, ref;

      data = this.item;
      data.content = data.contentTmp;
      ref = this;
      $('#SpinnerWrap').addClass('act');
      return $http.post('/_api/update', data).then(function(result) {
        $('#SpinnerWrap').removeClass('act');
        if (result.data.error === 0) {
          ref.item.edit = false;
          return ref.item.message = "updated.";
        } else {
          return ref.item.message = "update failed";
        }
      });
    };
    $scope.copyContent = function(item) {
      return item.content = item.contentTmp;
    };
    $scope.remove = function() {
      var check, data, ref;

      data = this.item;
      ref = this;
      check = confirm("Delete " + data.name + "?");
      if (check) {
        return $http.get("/_api/remove/" + data.slug).then(function(result) {
          var hash, v, x, _i, _len, _ref, _results;

          if (result.data.error === 0) {
            ref.item.message = "deleted.";
            hash = ref.item['$$hashKey'];
            _ref = $scope.items;
            _results = [];
            for (v = _i = 0, _len = _ref.length; _i < _len; v = ++_i) {
              x = _ref[v];
              if (x['$$hashKey'] === hash) {
                _results.push($scope.items.splice(v, 1));
              }
            }
            return _results;
          } else {
            return ref.item.message = "Removal failed.";
          }
        });
      }
    };
    $scope.prepareCategories = function(cats) {
      if (typeof cats === 'object') {
        return cats.join(', ');
      } else {
        return cats;
      }
    };
    $scope.editMode = function(item, flag) {
      return item.edit = flag;
    };
    $scope.addMode = function(flag) {
      $scope.adding = flag;
      if (flag) {
        return $scope.newItem = {};
      }
    };
    $scope.addNew = function() {
      var item;

      item = $scope.newItem;
      item.content = item.contentTmp;
      console.log($scope.newItem);
      return $http.post('/_api/add', item).then(function(result) {
        if (result.data.error === 0) {
          console.log(result, 'Hi there!');
          result.data.data.data.contentTmp = result.data.data.data.content;
          $scope.items.push(result.data.data.data);
          $scope.newItem = {};
          return $scope.adding = false;
        } else {
          return $scope.newItem.message = result.data.message;
        }
      });
    };
    $scope.FB_Share = function(item) {
      return FB.ui({
        method: 'feed',
        link: "" + location.origin + "/" + item['slug'],
        name: item['title']
      });
    };
    $scope.order = function(item) {
      return 1;
    };
    if ($rootScope.items === !void 0) {
      return $scope.items = $rootScope.items;
    } else {
      return $scope.refresh();
    }
  };

  window.SingleCtrl = function($scope, $http, $rootScope, $routeParams) {
    var item, items, slug, x, _i, _len;

    slug = $routeParams.slug;
    items = $rootScope.items;
    $scope.refreshSlug = function(slug, save) {
      return $http.get("/_api/" + slug).then(function(res) {
        if (res.data.error === 0) {
          $scope.item = res.data.data;
          if (save && ($rootScope.items === !void 0)) {
            return $rootScope.items.push(res.data.data);
          }
        } else {
          return $scope.item = {
            name: 'Uh oh.. we can\'t seem to find that page.',
            content: 'Sorry, but no.'
          };
        }
      });
    };
    if (items === void 0) {
      $scope.refreshSlug(slug, true);
    } else {
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        x = items[_i];
        if (x['slug'] === slug) {
          item = items[x];
        }
      }
      if (item) {
        $scope.item = item;
      } else {
        $scope.refreshSlug(slug, true);
      }
    }
    return $scope.$on('$viewContentLoaded', function() {
      if ($(window).width() < 641) {
        return $('.meta').addClass('act');
      } else {
        return setTimeout(function() {
          return $('meta').addClass('act');
        }, 1250);
      }
    });
  };

}).call(this);
